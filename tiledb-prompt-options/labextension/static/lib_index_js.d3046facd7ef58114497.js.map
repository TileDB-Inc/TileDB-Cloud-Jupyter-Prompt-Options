{"version":3,"file":"lib_index_js.d3046facd7ef58114497.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA8C;AACa;AACH;AACf;AACS;AACY;AACuB;AACrF,QAAQ,UAAU,EAAE,wDAAE;AACf,wCAAwC,mDAAM;AACrD;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAuB;AAC/B;AACA;AACA;AACA;AACA,YAAY,8DAAgB;AAC5B;AACA,wCAAwC,8DAAY,UAAU,2DAAW;AACzE;AACA;AACA;AACA,oBAAoB,2FAA2F,QAAQ,kFAA6B;AACpJ;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAuB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8DAAY,UAAU,2DAAW;AAC7E;AACA;AACA;AACA;AACA,gBAAgB,qEAAuB;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6DAA6D;AACzE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,sEAAgB;AACxB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7LO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;ACf8C;AACP;AACvC,QAAQ,2BAA2B,EAAE,wDAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sDAAY;AAC5C,+BAA+B,sDAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,6BAA6B,EAAC;;;;;;;;;;;;;;;AC3B9B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;ACV+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;ACjCkD;AACJ;AACmC;AAC1E;AACP,IAAI,gEAAU;AACd,kBAAkB,yFAAyB;AAC3C;AACA,YAAY,qEAAmB;AAC/B,YAAY,iEAAe,GAAG,kDAAkD;AAChF;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;ACZuC;AACvC;AACO;AACP;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA,qBAAqB,oDAAU;AAC/B;AACA;AACA;AACA,qBAAqB,cAAc,GAAG,WAAW;AACjD;AACA;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBsB;AACQ;AACI;AACb;AACA;AACY;AACN;AACiC;AACxF,QAAQ,UAAU,EAAE,wDAAE;AACtB,QAAQ,qBAAqB,EAAE,wDAAE;AACjC;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,eAAe,2DAAS,EAAE,oEAAgB,EAAE,wEAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAY;AAChD,sCAAsC,8DAAY,YAAY,2DAAW;AACzE;AACA;AACA;AACA;AACA;AACA,sDAAsD,oFAA+B;AACrF;AACA;AACA,YAAY,oEAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,gEAAgE;AACpF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;AACA,iEAAe,SAAS,EAAC","sources":["webpack://@tiledb-inc/tiledb_prompt_options/./lib/dialogs/TileDBPromptOptionsWidget.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/dom.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/getDefaultS3DataFromNamespace.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/getOrgNamesWithWritePermissions.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/handler.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/openDialogs.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/helpers/tiledbAPI.js","webpack://@tiledb-inc/tiledb_prompt_options/./lib/index.js"],"sourcesContent":["import { v2 } from '@tiledb-inc/tiledb-cloud';\nimport { addOptionsToSelectInput } from './../helpers/dom';\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nimport { resetSelectInput } from '../helpers/dom';\nimport getTileDBAPI, { Versions } from '../helpers/tiledbAPI';\nimport getDefaultS3DataFromNamespace from '../helpers/getDefaultS3DataFromNamespace';\nconst { UserApi } = v2;\nexport class TileDBPromptOptionsWidget extends Widget {\n    constructor(options) {\n        const body = document.createElement('div');\n        super({ node: body });\n        this.addClass('TDB-Prompt-Dialog');\n        this.app = options.app;\n        this.docManager = options.docManager;\n        this.isDefaultS3PathInputDirty = false;\n        const name_label = document.createElement('label');\n        name_label.textContent = 'Name:';\n        const name_input = document.createElement('input');\n        name_input.setAttribute('type', 'text');\n        name_input.setAttribute('value', 'untitled');\n        name_input.setAttribute('name', 'name');\n        name_input.setAttribute('required', 'true');\n        name_input.setAttribute('pattern', '[a-z][A-Za-z0-9_-]*');\n        name_input.setAttribute('maxlength', '250');\n        name_input.setAttribute('oninput', 'this.setCustomValidity(\"\")');\n        name_input.addEventListener('invalid', (event) => {\n            if (event.target.validity.valueMissing) {\n                event.target.setCustomValidity('This field is required');\n            }\n            else {\n                event.target.setCustomValidity('Name should start with a lowercase character and consist of letters(a -z and A-Z), numbers, \"_\" and \"-\" only');\n            }\n        });\n        const s3_label = document.createElement('label');\n        s3_label.textContent = 'Cloud storage path:';\n        const s3_input = document.createElement('input');\n        s3_input.setAttribute('type', 'text');\n        s3_input.setAttribute('value', options.defaultS3Path);\n        s3_input.setAttribute('name', 's3_prefix');\n        s3_input.onchange = () => {\n            this.isDefaultS3PathInputDirty = true;\n        };\n        const s3_cred_label = document.createElement('label');\n        s3_cred_label.textContent = 'Cloud storage credentials:';\n        const s3_cred_selectinput = document.createElement('select');\n        s3_cred_selectinput.setAttribute('name', 's3_credentials');\n        s3_cred_selectinput.setAttribute('required', 'true');\n        const credentials = options.credentials.map(cred => cred.name);\n        addOptionsToSelectInput(s3_cred_selectinput, credentials, options.defaultS3CredentialName);\n        const addCredentialsLink = document.createElement('a');\n        addCredentialsLink.textContent = 'Add credentials';\n        addCredentialsLink.classList.add('TDB-Prompt-Dialog__link');\n        addCredentialsLink.onclick = () => {\n            window.parent.postMessage('@tiledb/prompt_options::add_credentials', '*');\n        };\n        const owner_label = document.createElement('label');\n        owner_label.textContent = 'Owner:';\n        const owner_input = document.createElement('select');\n        addOptionsToSelectInput(owner_input, options.owners, options.selectedOwner);\n        owner_input.setAttribute('name', 'owner');\n        owner_input.onchange = async (e) => {\n            const newOwner = e.currentTarget.value;\n            // Reset credentials input\n            resetSelectInput(s3_cred_selectinput);\n            // Get credentials and default credentials name from API\n            const userTileDBAPI = await getTileDBAPI(UserApi, Versions.v2);\n            const credentialsResponse = await userTileDBAPI.listCredentials(newOwner);\n            const newCredentials = credentialsResponse.data.credentials || [];\n            const username = options.owners[0];\n            const { default_s3_path_credentials_name: defaultCredentialsName, default_s3_path: defaultS3Path } = await getDefaultS3DataFromNamespace(username, newOwner);\n            // Update the s3_path with the new owner's default_s3_path if the input has not changed by the user.\n            if (defaultS3Path && !this.isDefaultS3PathInputDirty) {\n                s3_input.setAttribute('value', defaultS3Path);\n            }\n            const credentials = newCredentials.map(cred => cred.name);\n            addOptionsToSelectInput(s3_cred_selectinput, credentials, defaultCredentialsName);\n        };\n        const kernel_label = document.createElement('label');\n        kernel_label.textContent = 'Kernel:';\n        const kernel_input = document.createElement('select');\n        kernel_input.setAttribute('name', 'kernel');\n        const kernelSpecs = this.docManager.services.kernelspecs\n            .specs;\n        const listOfAvailableKernels = Object.keys(kernelSpecs.kernelspecs);\n        const kernelNames = Object.values(kernelSpecs.kernelspecs).map(kernel => kernel.display_name);\n        const defaultKernel = kernelSpecs.default;\n        addOptionsToSelectInput(kernel_input, listOfAvailableKernels, defaultKernel, kernelNames);\n        const form = document.createElement('form');\n        form.classList.add('TDB-Prompt-Dialog__form');\n        body.appendChild(form);\n        form.appendChild(name_label);\n        form.appendChild(name_input);\n        form.appendChild(s3_label);\n        form.appendChild(s3_input);\n        form.appendChild(s3_cred_label);\n        form.appendChild(s3_cred_selectinput);\n        form.appendChild(addCredentialsLink);\n        form.appendChild(owner_label);\n        form.appendChild(owner_input);\n        form.appendChild(kernel_label);\n        form.appendChild(kernel_input);\n        // Update credentials input when we get message from parent window\n        window.addEventListener('message', async (e) => {\n            var _a, _b;\n            if (e.data === 'TILEDB_UPDATED_CREDENTIALS') {\n                // Make call to update credentials\n                const userTileDBAPI = await getTileDBAPI(UserApi, Versions.v2);\n                const username = options.owners[0];\n                const credentialsResponse = await userTileDBAPI.listCredentials(username);\n                s3_cred_selectinput.innerHTML = '';\n                const credentials = (_b = (_a = credentialsResponse === null || credentialsResponse === void 0 ? void 0 : credentialsResponse.data) === null || _a === void 0 ? void 0 : _a.credentials) === null || _b === void 0 ? void 0 : _b.map(cred => cred.name);\n                addOptionsToSelectInput(s3_cred_selectinput, credentials, options.defaultS3CredentialName);\n            }\n        });\n    }\n    /**\n     * Add a fake button with a loader to indicate users to wait\n     */\n    onAfterAttach() {\n        var _a;\n        const footerElement = (_a = document.querySelector('.TDB-Prompt-Dialog')) === null || _a === void 0 ? void 0 : _a.nextElementSibling;\n        const fakeBtn = document.createElement('button');\n        fakeBtn.classList.add('TDB-Prompt-Dialog__styled-btn', 'jp-Dialog-button', 'jp-mod-accept', 'jp-mod-styled');\n        fakeBtn.textContent = 'GO';\n        fakeBtn.onclick = () => onSbumit(this.app, this.docManager);\n        footerElement.appendChild(fakeBtn);\n    }\n    getValue() {\n        const input_elem = this.node.getElementsByTagName('input');\n        const select_elem = this.node.getElementsByTagName('select');\n        return {\n            name: input_elem[0].value,\n            s3_prefix: input_elem[1].value,\n            s3_credentials: select_elem[0].value,\n            owner: select_elem[1].value,\n            kernel: select_elem[2].value\n        };\n    }\n}\nfunction onSbumit(app, docManager) {\n    const fakeBtn = document.querySelector('.TDB-Prompt-Dialog__styled-btn');\n    const originalSubmitButton = document.querySelector('.TDB-Prompt-Dialog__btn');\n    const formElement = document.querySelector('.TDB-Prompt-Dialog__form');\n    const formData = new FormData(formElement);\n    // If form is not valid just return\n    if (!formElement.reportValidity()) {\n        return;\n    }\n    fakeBtn.textContent = '';\n    const loader = document.createElement('div');\n    loader.classList.add('TDB-Prompt-Dialog__loader');\n    fakeBtn.appendChild(loader);\n    const { name, owner, s3_credentials, s3_prefix, kernel: kernelName } = serializeForm(formData);\n    const tiledb_options_json = {\n        name,\n        s3_prefix,\n        s3_credentials\n    };\n    const kernel = { name: kernelName };\n    const path = 'cloud/owned/'.concat(owner, '/');\n    const options = {\n        path: path,\n        type: 'notebook',\n        options: JSON.stringify(tiledb_options_json)\n    };\n    docManager.services.contents\n        .newUntitled(options)\n        .then(model => {\n        app.commands.execute('docmanager:open', {\n            factory: 'Notebook',\n            path: model.path + '.ipynb',\n            kernel\n        }).finally(() => {\n            // We click the original submit button to close the dialog\n            originalSubmitButton.click();\n        });\n    })\n        .catch(err => {\n        showErrorMessage('Error', err);\n        originalSubmitButton.click();\n    });\n}\nfunction serializeForm(formData) {\n    const obj = {};\n    for (const key of formData.keys()) {\n        obj[key] = formData.get(key);\n    }\n    return obj;\n}\n","export const resetSelectInput = (selectInput) => {\n    selectInput.value = '';\n    selectInput.innerHTML = '';\n};\nexport const addOptionsToSelectInput = (selectInput, options, defaultValue, deplayNames) => {\n    options.forEach((opt, i) => {\n        const diplayName = deplayNames ? deplayNames[i] : opt;\n        const option = document.createElement('option');\n        option.setAttribute('value', opt);\n        option.setAttribute('label', diplayName);\n        if (!!defaultValue && defaultValue === opt) {\n            option.setAttribute('selected', 'true');\n        }\n        selectInput.append(option);\n    });\n};\n","import { v1 } from '@tiledb-inc/tiledb-cloud';\nimport getTileDBAPI from './tiledbAPI';\nconst { UserApi, OrganizationApi } = v1;\n/**\n * Returns the default_s3_path_credentials_name of the selected owner\n * @param user The user's username\n * @param owner The selected owner\n * @returns The default credentials name of the owner\n */\nconst getDefaultS3DataFromNamespace = async (user, owner) => {\n    const userTileDBAPI = await getTileDBAPI(UserApi);\n    const orgTileDBAPI = await getTileDBAPI(OrganizationApi);\n    const isOwnerOrganization = user !== owner;\n    /**\n     * If the current owner is the user we use UserAPI to get user's data\n     * otherwise the current owner is an organization so we use OrganizationApi\n     * to get the org's data\n     */\n    const getOwnerData = () => isOwnerOrganization\n        ? orgTileDBAPI.getOrganization(owner)\n        : userTileDBAPI.getUser();\n    const ownerResponse = await getOwnerData();\n    return {\n        default_s3_path: ownerResponse.data.default_s3_path,\n        default_s3_path_credentials_name: ownerResponse.data.default_s3_path_credentials_name\n    };\n};\nexport default getDefaultS3DataFromNamespace;\n","export default function getOrgNamesWithWritePermissions(orgs) {\n    const orgNames = [];\n    orgs.forEach(org => {\n        const orgName = org.organization_name;\n        if (orgName !== 'public' &&\n            !!~(org === null || org === void 0 ? void 0 : org.allowed_actions.indexOf('write'))) {\n            orgNames.push(orgName);\n        }\n    });\n    return orgNames;\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'get_access_token', (endPoint = ''));\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n","import { showDialog } from '@jupyterlab/apputils';\nimport { Dialog } from '@jupyterlab/apputils';\nimport { TileDBPromptOptionsWidget } from '../dialogs/TileDBPromptOptionsWidget';\nexport const showMainDialog = (data) => {\n    showDialog({\n        body: new TileDBPromptOptionsWidget(data),\n        buttons: [\n            Dialog.cancelButton(),\n            Dialog.okButton({ label: 'GO', className: 'TDB-Prompt-Dialog__btn' })\n        ],\n        title: 'TileDB Notebook Options'\n    });\n};\n","import { requestAPI } from './handler';\nlet data;\nexport var Versions;\n(function (Versions) {\n    Versions[\"v1\"] = \"v1\";\n    Versions[\"v2\"] = \"v2\";\n})(Versions || (Versions = {}));\nconst getTileDBAPI = async (Api, apiVersion = Versions.v1) => {\n    if (!data) {\n        data = await requestAPI();\n    }\n    const config = {\n        apiKey: data.token,\n        basePath: `${data.api_host}/${apiVersion}`\n    };\n    return new Api(config);\n};\nexport default getTileDBAPI;\n","import { v1, v2 } from '@tiledb-inc/tiledb-cloud';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport getTileDBAPI, { Versions } from './helpers/tiledbAPI';\nimport { showMainDialog } from './helpers/openDialogs';\nimport getOrgNamesWithWritePermissions from './helpers/getOrgNamesWithWritePermissions';\nconst { UserApi } = v1;\nconst { UserApi: UserApiV2 } = v2;\nconst extension = {\n    activate,\n    autoStart: true,\n    id: 'tiledb-prompt-notebook-options',\n    optional: [ILauncher],\n    requires: [IMainMenu, IDocumentManager, IFileBrowserFactory]\n};\nfunction activate(app, menu, docManager, browser, launcher) {\n    const OPEN_COMMAND = 'tiledb-prompt-notebook-options:open';\n    app.commands.addCommand(OPEN_COMMAND, {\n        caption: 'Prompt the user for TileDB notebook options',\n        execute: async () => {\n            var _a;\n            const tileDBAPI = await getTileDBAPI(UserApi);\n            const tileDBAPIV2 = await getTileDBAPI(UserApiV2, Versions.v2);\n            const userResponse = await tileDBAPI.getUser();\n            const userData = userResponse.data;\n            const username = userData.username;\n            const credentialsResponse = await tileDBAPIV2.listCredentials(username);\n            const owners = [username];\n            const organizationsWithWritePermissions = getOrgNamesWithWritePermissions(userData.organizations || []);\n            const defaultS3Path = userData.default_s3_path || 's3://tiledb-user/notebooks';\n            owners.push(...organizationsWithWritePermissions);\n            showMainDialog({\n                owners,\n                credentials: ((_a = credentialsResponse.data) === null || _a === void 0 ? void 0 : _a.credentials) || [],\n                defaultS3Path,\n                defaultS3CredentialName: userData.default_s3_path_credentials_name,\n                app,\n                docManager,\n                selectedOwner: userData.username\n            });\n        },\n        isEnabled: () => true,\n        label: 'TileDB Notebook'\n    });\n    // Add a launcher item.\n    if (launcher) {\n        launcher.add({\n            args: { isLauncher: true, kernelName: 'tiledb-prompt-notebook-options' },\n            category: 'Notebook',\n            command: OPEN_COMMAND,\n            kernelIconUrl: 'https://cloud.tiledb.com/static/img/tiledb-logo-jupyterlab.svg',\n            rank: 1\n        });\n    }\n    // Add to the file menu.\n    if (menu) {\n        menu.fileMenu.newMenu.addGroup([{ command: OPEN_COMMAND }], 40);\n    }\n    console.log('JupyterLab extension @tiledb/tiledb_prompt_options is activated.');\n}\nexport default extension;\n"],"names":[],"sourceRoot":""}