trigger:
  tags:
    include:
      - v*
  branches:
    include:
    - master

stages:
- stage: Build
  jobs:
  - job: Build
    strategy:
      matrix:
        mac_38:
          imageName: 'macOS-11'
          python.version: '3.8'
        mac_39:
          imageName: 'macOS-11'
          python.version: '3.9'
        linux_py38:
          imageName: 'ubuntu-20.04'
          python.version: '3.8'
        linux_py39:
          imageName: 'ubuntu-20.04'
          python.version: '3.9'
    pool:
      vmImage: $(imageName)

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

      condition: eq(variables['imageName'], 'ubuntu-20.04')
    - script: python -m pip install --upgrade ipywidgets traitlets pytest build jupyter-packaging==0.12.0 jupyterlab==3.6.5
      # pip installs release candidates by default:
      #   https://github.com/pypa/pip/issues/4969
      displayName: 'Install dependencies'

    - script: python -m pip install black==22.3.0
      displayName: 'Install black (linter)'
      condition: eq(variables['python.version'], '3.9')
    - script: black --check .
      displayName: 'Test Formating'
      condition: eq(variables['python.version'], '3.9')

    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
    - script: jlpm
      displayName: 'Install labextension dependencies'
      env:
        NPM_TOKEN: $(NPM_TOKEN)

    - script: jlpm run build:prod
      displayName: 'Build jupyterlab extension'
      env:
        NPM_TOKEN: $(NPM_TOKEN)

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
      # Build the python distribution from source
    - script: python -m build
      displayName: 'Build python'
      condition: ne(variables['Agent.OS'], 'Windows_NT')
      env:
        NPM_TOKEN: $(NPM_TOKEN)

    - bash: |
        set -xeo pipefail
        # Display log files if the build failed
        echo "Dumping log files for failed build"
        echo "----------------------------------"
        for f in $(find $BUILD_REPOSITORY_LOCALPATH/build -name *.log);
          do echo "------"
              echo $f
              echo "======"
              cat $f
          done;
      condition: failed() # only run this job if the build step failed
      displayName: "Print log files (failed build only)"
- stage: Deploy
  dependsOn: Build
  condition: and(succeeded('Build'), startsWith(variables['Build.SourceBranch'], 'refs/tag'))
  jobs:
  - job: Deploy_package
    pool:
      vmImage: 'ubuntu-20.04'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        architecture: 'x64'

    - script: 'pip install twine build setuptools setuptools_scm jupyter-packaging==0.12.0 jupyterlab==3.6.5'
      displayName: 'Install twine/build'

    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
    - script: |
        echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        jlpm
      displayName: 'Save npm token & install labextension dependencies'
      env:
        NPM_TOKEN: $(NPM_TOKEN)

    - script: |
        latestGitTag=$(git describe --tags --abbrev=0)
        latestGitTag="${latestGitTag:1}"
        npm version $latestGitTag --no-commit-hooks --no-git-tag-version
      displayName: 'Update package.json version'

    - script: jlpm run build:prod
      displayName: 'Build jupyterlab extension'
      env:
        NPM_TOKEN: $(NPM_TOKEN)

    # Build the python distribution from source
    - script: python -m build
      displayName: 'Build python'
      env:
        NPM_TOKEN: $(NPM_TOKEN)

    - task: TwineAuthenticate@1
      displayName: 'Twine Authenticate'
      inputs:
        pythonUploadServiceConnection: 'pypi-upload'

    - script: ./scripts/publish.sh
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
        NPM_TOKEN: $(NPM_TOKEN)
      displayName: 'Release to npm'

    - script: python -m twine upload -r "pypi-upload" --config-file $(PYPIRC_PATH) --verbose dist/*.whl
      displayName: 'Release to Pypi'